"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9373],{8215:function(t,e,n){var a=n(7294);e.Z=function(t){var e=t.children,n=t.hidden,i=t.className;return a.createElement("div",{role:"tabpanel",hidden:n,className:i},e)}},5064:function(t,e,n){n.d(e,{Z:function(){return d}});var a=n(7294),i=n(9443);var o=function(){var t=(0,a.useContext)(i.Z);if(null==t)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return t},r=n(6010),l="tabItem_1uMI",s="tabItemActive_2DSg";var d=function(t){var e,n=t.lazy,i=t.block,d=t.defaultValue,p=t.values,m=t.groupId,c=t.className,u=a.Children.toArray(t.children),g=null!=p?p:u.map((function(t){return{value:t.props.value,label:t.props.label}})),k=null!=d?d:null==(e=u.find((function(t){return t.props.default})))?void 0:e.props.value,h=o(),f=h.tabGroupChoices,b=h.setTabGroupChoices,N=(0,a.useState)(k),v=N[0],y=N[1],w=[];if(null!=m){var C=f[m];null!=C&&C!==v&&g.some((function(t){return t.value===C}))&&y(C)}var T=function(t){var e=t.currentTarget,n=w.indexOf(e),a=g[n].value;y(a),null!=m&&(b(m,a),setTimeout((function(){var t,n,a,i,o,r,l,d;(t=e.getBoundingClientRect(),n=t.top,a=t.left,i=t.bottom,o=t.right,r=window,l=r.innerHeight,d=r.innerWidth,n>=0&&o<=d&&i<=l&&a>=0)||(e.scrollIntoView({block:"center",behavior:"smooth"}),e.classList.add(s),setTimeout((function(){return e.classList.remove(s)}),2e3))}),150))},_=function(t){var e,n=null;switch(t.key){case"ArrowRight":var a=w.indexOf(t.target)+1;n=w[a]||w[0];break;case"ArrowLeft":var i=w.indexOf(t.target)-1;n=w[i]||w[w.length-1]}null==(e=n)||e.focus()};return a.createElement("div",{className:"tabs-container"},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":i},c)},g.map((function(t){var e=t.value,n=t.label;return a.createElement("li",{role:"tab",tabIndex:v===e?0:-1,"aria-selected":v===e,className:(0,r.Z)("tabs__item",l,{"tabs__item--active":v===e}),key:e,ref:function(t){return w.push(t)},onKeyDown:_,onFocus:T,onClick:T},null!=n?n:e)}))),n?(0,a.cloneElement)(u.filter((function(t){return t.props.value===v}))[0],{className:"margin-vert--md"}):a.createElement("div",{className:"margin-vert--md"},u.map((function(t,e){return(0,a.cloneElement)(t,{key:e,hidden:t.props.value!==v})}))))}},7570:function(t,e,n){n.r(e),n.d(e,{contentTitle:function(){return m},default:function(){return k},frontMatter:function(){return p},metadata:function(){return c},toc:function(){return u}});var a=n(7462),i=n(3366),o=(n(7294),n(3905)),r=n(6488),l=n(5064),s=n(8215),d=["components"],p={sidebar_label:"JavaScript",sidebar_position:99,description:"Working with Adminterface's JavaScript."},m="JavaScript",c={unversionedId:"enhancements/javascript",id:"enhancements/javascript",isDocsHomePage:!1,title:"JavaScript",description:"Working with Adminterface's JavaScript.",source:"@site/docs/enhancements/javascript.mdx",sourceDirName:"enhancements",slug:"/enhancements/javascript",permalink:"/docs/enhancements/javascript",editUrl:"https://github.com/CMDBrew/adminterface/edit/main/website/docs/enhancements/javascript.mdx",tags:[],version:"current",sidebarPosition:99,frontMatter:{sidebar_label:"JavaScript",sidebar_position:99,description:"Working with Adminterface's JavaScript."},sidebar:"tutorialSidebar",previous:{title:"Action Items",permalink:"/docs/enhancements/action-items"},next:{title:"Terms of Service",permalink:"/docs/terms"}},u=[{value:"Quick Start",id:"quick-start",children:[]},{value:"Debugging",id:"debugging",children:[]},{value:"Initializers",id:"initializers",children:[{value:"Template",id:"template",children:[]},{value:"Usage",id:"usage",children:[]}]},{value:"Bootstrap",id:"bootstrap",children:[{value:"Popover",id:"popover",children:[]},{value:"Tooltip",id:"tooltip",children:[]}]},{value:"Confirm Dialog",id:"confirm-dialog",children:[{value:"Configuration",id:"configuration",children:[]},{value:"Events",id:"events",children:[]},{value:"Usage",id:"usage-1",children:[]}]},{value:"Detached Dropdown",id:"detached-dropdown",children:[{value:"Configuration",id:"configuration-1",children:[]},{value:"Usage",id:"usage-2",children:[]}]},{value:"Inputs",id:"inputs",children:[{value:"Configuration",id:"configuration-2",children:[]},{value:"Plugins",id:"plugins",children:[]},{value:"Usage",id:"usage-3",children:[]}]}],g={toc:u};function k(t){var e=t.components,n=(0,i.Z)(t,d);return(0,o.kt)("wrapper",(0,a.Z)({},g,n,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"javascript"},"JavaScript"),(0,o.kt)("p",null,"Bring Adminterface to life with JavaScript. Learn about plugins, our data and programmatic API options, and more."),(0,o.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"We've rewritten ActiveAdmin's JavaScript and made it more flexible. In addition, ",(0,o.kt)("a",{parentName:"p",href:"https://jquery.com/"},"jQuery")," is no longer a dependency."))),(0,o.kt)("h2",{id:"quick-start"},"Quick Start"),(0,o.kt)("p",null,"You can export commonly used components so that you can attach them programmatically."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"import * as Adminterface from '@cmdbrew/adminterface'\n")),(0,o.kt)("h2",{id:"debugging"},"Debugging"),(0,o.kt)("p",null,"When the DOM loads, the app attaches JavasScript for each component to the ",(0,o.kt)("inlineCode",{parentName:"p"},"window.adminterface")," object to give you a whole picture of the entire application and allow quick debugging."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript",metastring:'title="Inside your browser JavaScript console"',title:'"Inside',your:!0,browser:!0,JavaScript:!0,'console"':!0},"// Enables the debugger\n> adminterface.debug = true\n// List available commands and properties\n> adminterface.help()\n")),(0,o.kt)("h2",{id:"initializers"},"Initializers"),(0,o.kt)("p",null,"Adminterface comes with initializers that you can hook into your custom JavaScript when manipulating DOM dynamically."),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,o.kt)("th",{parentName:"tr",align:"left"},"Params"),(0,o.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"initFlatpickr")),(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"element")),(0,o.kt)("td",{parentName:"tr",align:"left"},"Find and initialize ",(0,o.kt)("a",{parentName:"td",href:"https://flatpickr.js.org/"},"flatpickr")," for child elements with the ",(0,o.kt)("inlineCode",{parentName:"td"},"[data-aa-flatpickr]")," attribute within the ",(0,o.kt)("inlineCode",{parentName:"td"},"element"),".")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"initTomSelect")),(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"element")),(0,o.kt)("td",{parentName:"tr",align:"left"},"Find and initialize ",(0,o.kt)("a",{parentName:"td",href:"https://tom-select.js.org/"},"TomSelect")," for child elements with the ",(0,o.kt)("inlineCode",{parentName:"td"},"[data-aa-tom-select]")," attribute within the ",(0,o.kt)("inlineCode",{parentName:"td"},"element"),".")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"initInputCounter")),(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"element")),(0,o.kt)("td",{parentName:"tr",align:"left"},"Find and initialize ",(0,o.kt)("a",{parentName:"td",href:"#input-counter"},"Input Counter")," for child elements with the ",(0,o.kt)("inlineCode",{parentName:"td"},"[data-aa-input-counter]")," attribute within the ",(0,o.kt)("inlineCode",{parentName:"td"},"element"),".")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"initPasswordVisibility")),(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"element")),(0,o.kt)("td",{parentName:"tr",align:"left"},"Find and initialize ",(0,o.kt)("a",{parentName:"td",href:"#password-visiblity"},"PasswordVisibility")," for child elements with the ",(0,o.kt)("inlineCode",{parentName:"td"},"[data-aa-password-visibility]")," attribute within the ",(0,o.kt)("inlineCode",{parentName:"td"},"element"),".")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"initBootstrap")),(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"element")),(0,o.kt)("td",{parentName:"tr",align:"left"},"Find and initialize ",(0,o.kt)("a",{parentName:"td",href:"#bootstrap"},"Bootstrap's JavaScript")," for child elements matched the specified selectors within the ",(0,o.kt)("inlineCode",{parentName:"td"},"element"),".")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"initDetachedDropdown")),(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"element")),(0,o.kt)("td",{parentName:"tr",align:"left"},"Find and initialize ",(0,o.kt)("a",{parentName:"td",href:"#detached-dropdown"},"Detached Dropdown")," for child elements with the ",(0,o.kt)("inlineCode",{parentName:"td"},".dropdown")," class within the ",(0,o.kt)("inlineCode",{parentName:"td"},"element"),".")))),(0,o.kt)("h3",{id:"template"},"Template"),(0,o.kt)("p",null,"All initializers follow a similar format. You can also add custom initializers as you see fit."),(0,o.kt)("p",null,"For example, here is how we initialize ",(0,o.kt)("a",{parentName:"p",href:"https://flatpickr.js.org/"},"flatpickr")," inside Adminterface:"),(0,o.kt)(r.Z,{className:"language-javascript",mdxType:"CodeBlock"},"/* global adminterface */\nimport flatpickr from 'flatpickr'\n\nconst initFlatpickr = (element) => {\n  const flatpickrTriggerList = [].slice.call(element.querySelectorAll('[data-aa-flatpickr]'))\n\n  flatpickrTriggerList.map((el) => {\n    const options = JSON.parse(el.dataset.aaFlatpickr || '{}')\n    const instance = flatpickr(el, options)\n\n    adminterface.addObserver(el, instance, 'flatpickr')\n    return instance\n  })\n}\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  initFlatpickr(document)\n})\n\ndocument.addEventListener('confirm_dialog:before_open', (el) => {\n  initFlatpickr(el.detail.dialogForm)\n})\n\nexport default initFlatpickr\n"),(0,o.kt)("h3",{id:"usage"},"Usage"),(0,o.kt)("p",null,"You can call these initializers on a specific event or dynamically inside your script."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"import {\n  initBootstrap,\n  initDetachedDropdown,\n  initFlatpickr,\n  initInputCounter,\n  initPasswordVisibility,\n  initTomSelect\n} from '@cmdbrew/adminterface'\n\n// Call initializers inside a function\nconst myFunction = (element) => {\n  initBootstrap(element)\n  initDetachedDropdown(element)\n  initFlatpickr(element)\n  initInputCounter(element)\n  initPasswordVisibility(element)\n  initTomSelect(element)\n}\n\n// Call initializers on a specific event\ndocument.addEventListener('customEvent', () => {\n  const el = document.getElementById(\"my-element\")\n\n  initBootstrap(el)\n  initDetachedDropdown(el)\n  initFlatpickr(el)\n  initInputCounter(el)\n  initPasswordVisibility(el)\n  initTomSelect(el)\n})\n")),(0,o.kt)("h2",{id:"bootstrap"},"Bootstrap"),(0,o.kt)("p",null,"We've installed the required plugins and enabled the following when the DOM loads by default, so you don't have to initialize them yourself."),(0,o.kt)("h3",{id:"popover"},"Popover"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Selector:")," ",(0,o.kt)("inlineCode",{parentName:"li"},'[data-bs-toggle="popover"]')),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Doc:")," See ",(0,o.kt)("a",{parentName:"li",href:"https://getbootstrap.com/docs/5.1/components/popovers"},"Bootstrap guide on popovers")," for usages")),(0,o.kt)(l.Z,{defaultValue:"html",values:[{label:"HTML",value:"html"},{label:"Arbre",value:"arbre"}],mdxType:"Tabs"},(0,o.kt)(s.Z,{value:"html",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-html"},'<button\n  type="button"\n  class="btn btn-lg btn-danger"\n  title="Popover title"\n  data-bs-toggle="popover"\n  data-bs-content="And here\'s some amazing content. It\'s very engaging. Right?"\n>\n  Click to toggle popover\n</button>\n'))),(0,o.kt)(s.Z,{value:"arbre",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ruby"},'button(\n  class: "btn btn-lg btn-danger",\n  title: "Popover title",\n  "data-bs-toggle": "popover",\n  "data-bs-content": "And here\'s some amazing content. It\'s very engaging. Right?"\n) do\n  text_node "Click to toggle popover"\nend\n')))),(0,o.kt)("h3",{id:"tooltip"},"Tooltip"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Selector:")," ",(0,o.kt)("inlineCode",{parentName:"li"},'[data-bs-toggle="tooltip"]')),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Doc:")," See ",(0,o.kt)("a",{parentName:"li",href:"https://getbootstrap.com/docs/5.1/components/tooltips"},"Bootstrap guide on tooltips")," for usages")),(0,o.kt)(l.Z,{defaultValue:"html",values:[{label:"HTML",value:"html"},{label:"Arbre",value:"arbre"}],mdxType:"Tabs"},(0,o.kt)(s.Z,{value:"html",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-html"},'<button\n  type="button"\n  class="btn btn-secondary"\n  title="Tooltip on top"\n  data-bs-toggle="tooltip"\n  data-bs-placement="top"\n>\n  Tooltip on top\n</button>\n'))),(0,o.kt)(s.Z,{value:"arbre",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ruby"},'button(\n  class: "btn btn-secondary",\n  title: "Tooltip on top",\n  "data-bs-toggle": "tooltip",\n  "data-bs-placement": "top"\n) do\n  text_node "Tooltip on top"\nend\n')))),(0,o.kt)("h2",{id:"confirm-dialog"},"Confirm Dialog"),(0,o.kt)("p",null,"Confirm dialogs are popups that ask the user for confirmation when performing a specific action. Adminterface uses ConfirmDialog for batch action and delete confirmations. See the guides on ",(0,o.kt)("a",{parentName:"p",href:"/docs/enhancements/index#batch-actions"},"BatchActions")," and ",(0,o.kt)("a",{parentName:"p",href:"/docs/enhancements/index#confirm-dialog"},"ConfirmDialog")," for more information."),(0,o.kt)("h3",{id:"configuration"},"Configuration"),(0,o.kt)("p",null,"You can override the default configurations by following the instructions below:"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"confirm")),(0,o.kt)("td",{parentName:"tr",align:null},"The confirm button")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"cancel")),(0,o.kt)("td",{parentName:"tr",align:null},"The cancel button")))),(0,o.kt)(l.Z,{defaultValue:"css_class",values:[{label:"CSS Class",value:"css_class"},{label:"Translation",value:"translation"}],mdxType:"Tabs"},(0,o.kt)(s.Z,{value:"css_class",mdxType:"TabItem"},"To update the default CSS classes, you can create a ",(0,o.kt)("code",null,"css_claases.yml")," and specify the changes. See ",(0,o.kt)("a",{href:"/docs/enhancements/customizations#css-classes"},"Configuration")," for more information.",(0,o.kt)("br",null),(0,o.kt)("br",null),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="e.g., config/adminterface/admin/css_classes.yml" {2-5}',title:'"e.g.,','config/adminterface/admin/css_classes.yml"':!0,"{2-5}":!0},"---\nconfirm_dialog:\n  cancel: btn btn-light\n  confirm: btn btn-primary\n"))),(0,o.kt)(s.Z,{value:"translation",mdxType:"TabItem"},"To update the translations, you can create an ",(0,o.kt)("code",null,"active_admin.en.yml")," file and specify the keys you want to update.",(0,o.kt)("br",null),(0,o.kt)("br",null),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="config/locales/active_admin.en.yml" {4-7}',title:'"config/locales/active_admin.en.yml"',"{4-7}":!0},"---\nen:\n  active_admin:\n    confirm_dialog:\n      cancel: Cancel\n      confirm: Okay!\n")))),(0,o.kt)("h3",{id:"events"},"Events"),(0,o.kt)("p",null,"We've exposed a few events for hooking into the modal dialog's functionality."),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"confirm_dialog:before_open")),(0,o.kt)("td",{parentName:"tr",align:null},"This event fires before the dialog is shown")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"confirm_dialog:after_open")),(0,o.kt)("td",{parentName:"tr",align:null},"This event fires after the dialog is shown")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"confirm_dialog:confirm")),(0,o.kt)("td",{parentName:"tr",align:null},"This event fires after the user clicks the confirm button")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"confirm_dialog:cancel")),(0,o.kt)("td",{parentName:"tr",align:null},"This event fires after the user clicks the cancel button")))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"document.addEventListener('confirm_dialog:before_open', (el) => {\n  // Add your custom code here...\n  console.log(el.detail.dialogForm)\n})\n")),(0,o.kt)("h3",{id:"usage-1"},"Usage"),(0,o.kt)("p",null,"You can specify the configurations by passing in the data option inside your HTML."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ruby",metastring:"{3-10}","{3-10}":!0},'  link_to(\n    "Confirm", "fake/path",\n    data: {\n      confirm: "My confirm message",\n      "aa-confirm-dialog": {\n        buttons: {\n          confirm: {text: "Okay!"}\n        }\n      }\n    }\n  )\n')),(0,o.kt)("p",null,"You can also trigger the dialog programmatically. Here is an example for adding a confirm dialog to a specific page:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"import { ConfirmDialog } from '@cmdbrew/adminterface'\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  const targetClassList = ['admin_users', 'show']\n  const bodyClassList = document.body.classList\n\n  if (targetClassList.every((v) => bodyClassList.contains(v))) {\n    const message = 'Tell me about yourself!'\n    const inputs = {\n      name: 'string',\n      birth_date: 'date_picker'\n    }\n    const options = {\n      buttons: {\n        confirm: {\n          text: 'Okay',\n          class: 'btn btn-success'\n        },\n        cancel: {\n          text: 'Cancel',\n          class: 'btn btn-link'\n        }\n      }\n    }\n    const onConfirm = () => alert('confirmed!')\n\n    new ConfirmDialog(message, inputs, options, onConfirm)\n  }\n})\n")),(0,o.kt)("h2",{id:"detached-dropdown"},"Detached Dropdown"),(0,o.kt)("p",null,"Adminterface uses ",(0,o.kt)("inlineCode",{parentName:"p"},"DetachedDropdown")," inside the ",(0,o.kt)("inlineCode",{parentName:"p"},"#active_admin_content")," element to detach the dropdown menu and append it to the ",(0,o.kt)("inlineCode",{parentName:"p"},"body")," to prevent overflow cutoffs from scrollable parent elements."),(0,o.kt)("h3",{id:"configuration-1"},"Configuration"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"menu")),(0,o.kt)("td",{parentName:"tr",align:null},"The selector for the element that should be append to ",(0,o.kt)("inlineCode",{parentName:"td"},"body")," when the dropdown opens")))),(0,o.kt)("h3",{id:"usage-2"},"Usage"),(0,o.kt)("p",null,"Here is an example of adding a detached dropdown to an element:"),(0,o.kt)(l.Z,{defaultValue:"javascript",values:[{label:"JavaScript",value:"javascript"},{label:"HTML",value:"html"}],mdxType:"Tabs"},(0,o.kt)(s.Z,{value:"javascript",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"import { DetachedDropdown } from '@cmdbrew/adminterface'\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  const dropdownTriggerList = [].slice.call(element.querySelectorAll('.my-dropdown'))\n  const options = {\n    menu: '.my-dropdown-menu'\n  }\n\n  dropdownTriggerList.map((el) => new DetachedDropdown(el, options))\n})\n"))),(0,o.kt)(s.Z,{value:"html",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-html"},'<div class="my-dropdown dropdown">\n  <a class="btn btn-secondary dropdown-toggle" href="#" role="button" id="dropdownMenuLink" data-bs-toggle="dropdown" aria-expanded="false">\n    Dropdown link\n  </a>\n\n  <ul class="my-dropdown-menu dropdown-menu" aria-labelledby="dropdownMenuLink">\n    <li><a class="dropdown-item" href="#">Action</a></li>\n    <li><a class="dropdown-item" href="#">Another action</a></li>\n    <li><a class="dropdown-item" href="#">Something else here</a></li>\n  </ul>\n</div>\n')))),(0,o.kt)("h2",{id:"inputs"},"Inputs"),(0,o.kt)("p",null,"Adminterface uses ",(0,o.kt)("inlineCode",{parentName:"p"},"Input")," to determine which input to render based on the configuration in ",(0,o.kt)("inlineCode",{parentName:"p"},"adminterface.meta.inputs")," to provide consistent APIs to define the behaviour of form inputs for both frontend and backend."),(0,o.kt)("h3",{id:"configuration-2"},"Configuration"),(0,o.kt)("p",null,"You can view the input mapping from your browser console."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript",metastring:'title="Inside your browser JavaScript console"',title:'"Inside',your:!0,browser:!0,JavaScript:!0,'console"':!0},"> adminterface.meta.inputs\n{string: \u0192, number: \u0192, url: \u0192, phone: \u0192, password: \u0192,\xa0\u2026}\n")),(0,o.kt)("h3",{id:"plugins"},"Plugins"),(0,o.kt)("p",null,"Adminterface comes with a set of JS plugins to make form inputs more dynamic."),(0,o.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"You can add custom plugins or disable the default plugins by updating the configurations files for ",(0,o.kt)("inlineCode",{parentName:"p"},"components"),". Learn more in the ",(0,o.kt)("a",{parentName:"p",href:"/docs/enhancements/customizations#components"},"Configuration guide"),"."))),(0,o.kt)("h4",{id:"input-counter"},"Input Counter"),(0,o.kt)("p",null,"Limit the number of letters/words that the user can insert inside the ",(0,o.kt)("inlineCode",{parentName:"p"},":text")," input."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml",metastring:"{5-6}","{5-6}":!0},"js:\n  - name: input-counter\n    default: false\n    options:\n      limit: 300\n      type: letter\n")),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:"left"},"Option"),(0,o.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,o.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"type")),(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"String")),(0,o.kt)("td",{parentName:"tr",align:"left"},"The mode for counting. Available options are ",(0,o.kt)("inlineCode",{parentName:"td"},"letter"),", ",(0,o.kt)("inlineCode",{parentName:"td"},"word"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"limit")),(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"Integer")),(0,o.kt)("td",{parentName:"tr",align:"left"},"Maximum count")))),(0,o.kt)("h4",{id:"password-visibility"},"Password Visibility"),(0,o.kt)("p",null,"Add a reveal password button to the ",(0,o.kt)("inlineCode",{parentName:"p"},":password")," field."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml",metastring:"{5-6}","{5-6}":!0},"js:\n  - name: password-visibility\n    default: false\n")),(0,o.kt)("h4",{id:"flatpickr"},"Flatpickr"),(0,o.kt)("p",null,"Add a date and time picker. See ",(0,o.kt)("a",{parentName:"p",href:"https://flatpickr.js.org/"},"Flatpickr")," for configuration options."),(0,o.kt)("h4",{id:"tomselect"},"TomSelect"),(0,o.kt)("p",null,"Add a Javascript select input. See ",(0,o.kt)("a",{parentName:"p",href:"https://tom-select.js.org/"},"TomSelect")," for configuration options."),(0,o.kt)("h3",{id:"usage-3"},"Usage"),(0,o.kt)("h4",{id:"return-html-based-on-an-input-type"},"Return HTML based on an input type"),(0,o.kt)("p",null,"Here is how you can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"Input")," class to return the HTML of an input type."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'// Import the Input class\nimport { Input } from \'@cmdbrew/adminterface\'\n\n// Render input\nconst html = (new Input("name", {as: "string"})).render()\n\n// Log to console\nconsole.log(html)\n')),(0,o.kt)("h4",{id:"change-an-input-type-to-a-custom-class"},"Change an input type to a custom class"),(0,o.kt)("p",null,"Here is an example for changing an input type to use a custom input:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"// Import the input you want to extend from\nimport { StringInput } from '@cmdbrew/adminterface'\n\n// Define your custom input\nclass CustomStringInput extends StringInput {\n  _defaultInputHTMLOptions () {\n    const options = {\n      class: `form-control custom-class ${this.options.as}`,\n      type: 'string'\n    }\n\n    return { ...super._defaultInputHTMLOptions(), ...options }\n  }\n\n  render () {\n    return this._inputWrapping(`\n      ${this._labelHTML()}\n      ${this._inputHTML()}\n      <p>My Custom Input!</p>\n    `)\n  }\n}\n\n// Update the mapping\nadminterface.meta.inputs.string = CustomStringInput\n")),(0,o.kt)("h4",{id:"add-a-custom-input-type"},"Add a custom input type"),(0,o.kt)("p",null,"Here is an example for adding a custom input type:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"// Import the input you want to extend from\nimport { BaseInput } from '@cmdbrew/adminterface'\n\n// Define your custom input\nclass MyCustomInput extends BaseInput {\n  _defaultInputHTMLOptions () {\n    const options = {\n      class: `form-control custom-class ${this.options.as}`,\n      type: 'string'\n    }\n\n    return { ...super._defaultInputHTMLOptions(), ...options }\n  }\n\n  render () {\n    return this._inputWrapping(`\n      ${this._labelHTML()}\n      ${this._inputHTML()}\n      <p>My Custom Input!</p>\n    `)\n  }\n}\n\n// Add the custom type to the mapping\nadminterface.meta.inputs.my_custom_input = MyCustomInput\n")),(0,o.kt)("p",null,"You can now use this custom input type inside your batch action form. You can learn more about the Batch Action form in the ",(0,o.kt)("a",{parentName:"p",href:"/docs/enhancements/index#batch-actions"},"Index Page doc"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ruby",metastring:"{3}","{3}":!0},"ActiveAdmin.register User do\n  batch_action :custom, form: {\n    reason: :my_custom_input,\n  } do |ids, inputs|\n    # ...\n  end\nend\n")),(0,o.kt)("h4",{id:"add-a-custom-plugin-for-an-input-type"},"Add a custom plugin for an input type"),(0,o.kt)("p",null,"Here we will show you an example of how you can add a custom plugin to an input type."),(0,o.kt)("p",null,"First, add your custom component to a configurations file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="config/adminterface/admin/users/components.yml" {3-9}',title:'"config/adminterface/admin/users/components.yml"',"{3-9}":!0},'...\ninputs:\n  string:\n    js:\n      - name: my-custom-plugin\n        default: false\n        options:\n          myOption: "test"\n')),(0,o.kt)("p",null,"Next, load the components configuration file inside your resource and add an input:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ruby",metastring:'title="app/admin/users.rb" {2,4-6}',title:'"app/admin/users.rb"',"{2,4-6}":!0},'ActiveAdmin.register User do\n  config.components = YAML.load_file(Rails.root.join("config/adminterface/admin/users/components.yml").to_s)\n\n  form do |f|\n    f.input :name, as: :string, my_custom_plugin: true\n  end\nend\n')),(0,o.kt)("p",null,"You can see that ",(0,o.kt)("inlineCode",{parentName:"p"},'data-aa-my-custom-plugin="{"myOption":"test"}"')," has been added into the input element if you inspect the element from the browser console."),(0,o.kt)("p",null,"Finally, you can attach custom JavaScript for this plugin:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"class MyCustomPlugin {\n  constructor (element, options) {\n    // Add your custom code...\n  }\n}\n\n// Find and iniatilzie the plugin for elements that match the selector\nconst initMyCustomPlugin = function (element) {\n  const myCustomPluginTriggerList = [].slice.call(element.querySelectorAll('[data-aa-my-custom-plugin]'))\n\n  myCustomPluginTriggerList.map((el) => {\n    const options = JSON.parse(el.dataset.aaMyCustomPlugin || '{}')\n\n    return new MyCustomPlugin(el, options)\n  })\n}\n\n// Load the plugin on DOM ready\ndocument.addEventListener('DOMContentLoaded', () => {\n  initMyCustomPlugin(document)\n})\n\n// Load the plugin on the `confirm_dialog:before_open` event\ndocument.addEventListener('confirm_dialog:before_open', (el) => {\n  initMyCustomPlugin(el.detail.dialogForm)\n})\n")))}k.isMDXComponent=!0}}]);