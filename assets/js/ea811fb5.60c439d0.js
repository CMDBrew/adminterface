"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[101],{8215:function(n,e,t){var a=t(7294);e.Z=function(n){var e=n.children,t=n.hidden,o=n.className;return a.createElement("div",{role:"tabpanel",hidden:t,className:o},e)}},5064:function(n,e,t){t.d(e,{Z:function(){return m}});var a=t(7294),o=t(9443);var i=function(){var n=(0,a.useContext)(o.Z);if(null==n)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return n},l=t(6010),s="tabItem_1uMI",r="tabItemActive_2DSg";var d=37,c=39;var m=function(n){var e=n.lazy,t=n.block,o=n.defaultValue,m=n.values,u=n.groupId,f=n.className,p=i(),g=p.tabGroupChoices,b=p.setTabGroupChoices,v=(0,a.useState)(o),h=v[0],k=v[1],_=a.Children.toArray(n.children),y=[];if(null!=u){var x=g[u];null!=x&&x!==h&&m.some((function(n){return n.value===x}))&&k(x)}var C=function(n){var e=n.currentTarget,t=y.indexOf(e),a=m[t].value;k(a),null!=u&&(b(u,a),setTimeout((function(){var n,t,a,o,i,l,s,d;(n=e.getBoundingClientRect(),t=n.top,a=n.left,o=n.bottom,i=n.right,l=window,s=l.innerHeight,d=l.innerWidth,t>=0&&i<=d&&o<=s&&a>=0)||(e.scrollIntoView({block:"center",behavior:"smooth"}),e.classList.add(r),setTimeout((function(){return e.classList.remove(r)}),2e3))}),150))},E=function(n){var e,t;switch(n.keyCode){case c:var a=y.indexOf(n.target)+1;t=y[a]||y[0];break;case d:var o=y.indexOf(n.target)-1;t=y[o]||y[y.length-1]}null==(e=t)||e.focus()};return a.createElement("div",{className:"tabs-container"},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":t},f)},m.map((function(n){var e=n.value,t=n.label;return a.createElement("li",{role:"tab",tabIndex:h===e?0:-1,"aria-selected":h===e,className:(0,l.Z)("tabs__item",s,{"tabs__item--active":h===e}),key:e,ref:function(n){return y.push(n)},onKeyDown:E,onFocus:C,onClick:C},t)}))),e?(0,a.cloneElement)(_.filter((function(n){return n.props.value===h}))[0],{className:"margin-vert--md"}):a.createElement("div",{className:"margin-vert--md"},_.map((function(n,e){return(0,a.cloneElement)(n,{key:e,hidden:n.props.value!==h})}))))}},7020:function(n,e,t){t.r(e),t.d(e,{contentTitle:function(){return u},default:function(){return b},frontMatter:function(){return m},metadata:function(){return f},toc:function(){return p}});var a=t(7462),o=t(3366),i=(t(7294),t(3905)),l=t(5064),s=t(8215),r=t(6848),d=t(3995),c=["components"],m={sidebar_position:4},u="Confirm Dialog",f={unversionedId:"guides/confirm-dialog",id:"guides/confirm-dialog",isDocsHomePage:!1,title:"Confirm Dialog",description:"``mdx-code-block",source:"@site/docs/guides/confirm-dialog.mdx",sourceDirName:"guides",slug:"/guides/confirm-dialog",permalink:"/active_admin_bootstrap/docs/guides/confirm-dialog",editUrl:"https://github.com/CMDBrew/active_admin_bootstrap/edit/master/website/docs/guides/confirm-dialog.mdx",version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Batch Actions",permalink:"/active_admin_bootstrap/docs/guides/batch-actions"}},p=[{value:"Configs",id:"configs",children:[]},{value:"Translations",id:"translations",children:[]}],g={toc:p};function b(n){var e=n.components,t=(0,o.Z)(n,c);return(0,i.kt)("wrapper",(0,a.Z)({},g,t,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"confirm-dialog"},"Confirm Dialog"),(0,i.kt)("h2",{id:"configs"},"Configs"),(0,i.kt)("p",null,"You can override the defaults by passing in the data option inside your HTML."),(0,i.kt)(l.Z,{defaultValue:"example",values:[{label:"Example",value:"example"},{label:"Default",value:"default"}],mdxType:"Tabs"},(0,i.kt)(s.Z,{value:"example",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript",metastring:"{3-10}","{3-10}":!0},'link_to(\n  "Confirm", "fake/path",\n  data: {\n    confirm: "My confirm message",\n    "aa-confirm-dialog": {\n      buttons: {\n        ok: {text: "Okay!"}\n      }\n    }\n  }\n)\n'))),(0,i.kt)(s.Z,{value:"default",mdxType:"TabItem"},(0,i.kt)(r.Z,{className:"language-yaml",title:"app/javascript/active_admin_bootstrap/lib/modal_dialog.js",lines:-11,mdxType:"CodeBlock"},"/* global Event, DOMParser */\n\nimport { Modal } from 'bootstrap'\nimport { serializeObject } from './utils'\nimport FlatpickerInit from '../initializers/flatpickr'\nimport TomSelect from '../initializers/tom_select'\nimport Input from './input'\n\nclass ModalDialog {\n  constructor (message, inputs, options, callback) {\n    const defaults = {\n      buttons: {\n        ok: {\n          text: 'Confirm',\n          class: 'btn btn-primary'\n        },\n        cancel: {\n          text: 'Cancel',\n          class: 'btn btn-link'\n        }\n      }\n    }\n\n    this.message = message\n    this.inputs = inputs\n    this.callback = callback\n    this.events = {\n      beforeOpen: new Event('modal_dialog:before_open'),\n      afterOpen: new Event('modal_dialog:after_open')\n    }\n\n    this.options = { ...defaults, ...options }\n    this._bind()\n  }\n\n  _template () {\n    const buttons = this.options.buttons || {}\n    const message = this.message ? `<p id=\"dialog-message\">${this.message}</p>` : ''\n\n    return `\n      <div id=\"modal-dialog-confirm\" class='modal fade' tabindex='-1'>\n        <div class='modal-dialog modal-dialog-centered modal-dialog-scrollable'>\n          <div class='modal-content'>\n            <div class='modal-body'>\n              ${message}\n              ${this._form()}\n            </div>\n            <div class='modal-footer'>\n              <button type='button' class='${(buttons.cancel || {}).class}' data-bs-dismiss='modal'>${(buttons.cancel || {}).text}</button>\n              <button id=\"modal-dialog-confirm-button\" type='button' class='${(buttons.ok || {}).class}'>${(buttons.ok || {}).text}</button>\n            </div>\n          </div>\n        </div>\n      </div>`\n  }\n\n  _form () {\n    let html = `<form id=\"modal-dialog-confirm-form\" title=\"${this.message}\">`\n    for (const name in this.inputs) {\n      const options = this.inputs[name]\n      html += (new Input(name, options)).render()\n    }\n\n    html += '</form>'\n    return html\n  }\n\n  _initPlugins (el) {\n    FlatpickerInit(el)\n    TomSelect(el)\n  }\n\n  _create () {\n    const dialogNode = new DOMParser().parseFromString(this._template(), 'text/html').body.childNodes[0]\n    return document.body.appendChild(dialogNode)\n  }\n\n  _bind () {\n    const _self = this\n    const dialogEl = this._create()\n    const dialogForm = dialogEl.querySelector('#modal-dialog-confirm-form') || {}\n    const cancelButton = dialogEl.querySelector('#modal-dialog-confirm-button') || {}\n    const beforeOpenEvent = this.events.beforeOpen\n    const afterOpenEvent = this.events.afterOpen\n    const serializeForm = serializeObject\n    const dialogConfirm = new Modal(dialogEl, {\n      keyboard: false,\n      backdrop: 'static'\n    })\n\n    cancelButton.addEventListener('click', function (e) {\n      _self.callback(serializeForm(dialogForm))\n      dialogConfirm.hide()\n    })\n\n    dialogEl.addEventListener('shown.bs.modal', function (_e) {\n      _self._initPlugins(dialogEl)\n    })\n\n    dialogEl.addEventListener('hidden.bs.modal', function (_e) {\n      dialogEl.remove()\n    })\n\n    beforeOpenEvent.detail = { dialogForm }\n    afterOpenEvent.detail = { dialogForm }\n    document.body.dispatchEvent(beforeOpenEvent)\n    dialogConfirm.show()\n    document.body.dispatchEvent(afterOpenEvent)\n  }\n}\n\nexport default ModalDialog\n"))),(0,i.kt)("h2",{id:"translations"},"Translations"),(0,i.kt)("p",null,"To update the translations, you can create an ",(0,i.kt)("inlineCode",{parentName:"p"},"active_admin.en.yml")," file and specify the keys you want to update."),(0,i.kt)(l.Z,{defaultValue:"example",values:[{label:"Example",value:"example"},{label:"Default",value:"default"}],mdxType:"Tabs"},(0,i.kt)(s.Z,{value:"example",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="config/locales/active_admin.en.yml" {4-7}',title:'"config/locales/active_admin.en.yml"',"{4-7}":!0},"---\nen:\n  active_admin:\n    confirm_dialog:\n      cancel: Cancel\n      ok: Okay!\n"))),(0,i.kt)(s.Z,{value:"default",mdxType:"TabItem"},(0,i.kt)(r.Z,{className:"language-yaml",title:"config/locales/active_admin.en.yml",mdxType:"CodeBlock"},d.Z))))}b.isMDXComponent=!0},3995:function(n,e){e.Z="---\nen:\n  active_admin:\n    batch_actions:\n      confirm_dialog:\n        cancel: Cancel\n        ok: Confirm\n    confirm_dialog:\n      cancel: Cancel\n      ok: Confirm\n    devise:\n      omniauth:\n        divider: Or\n    filter_model: Find %{model}\n"}}]);